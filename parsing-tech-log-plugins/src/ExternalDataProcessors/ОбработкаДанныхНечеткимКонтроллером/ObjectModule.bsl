#Область ДополнительныеОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Обработка данных нечетким контроллером");
	ПараметрыРегистрации.Вставить("Версия", "2022.11.21");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", ИнформацияПоИсторииИзменений());
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд,
	                "Настройка обработки данных нечетким контроллером",
					"ОбработкаДанныхНечеткимКонтроллером",
					"ОткрытиеФормы",
					Истина,
					);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ИнформацияПоИсторииИзменений()
	Возврат "
	| <div style='text-indent: 25px;'>Данная обработка позволяет обрабатывать данные сигналов используя нечеткую логику. В ядре находится нечеткий контроллер.</div>
	| <hr />
	| Подробную информацию смотрите по адресу интернет: <a target='_blank' href='https://github.com/Polyplastic/1c-parsing-tech-log'>https://github.com/Polyplastic/1c-parsing-tech-log</a>";
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДаных

Процедура ВыполнитьЗагрузкуДанных(Замер,ДополнительнаяОбработка=Неопределено) Экспорт
	
	ОбработатьДанныеНечеткимКонтроллером(Замер);	
	
КонецПроцедуры

Функция ОбработатьДанныеНечеткимКонтроллером(Замер) Экспорт

	// получим настройки загрузки
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
	
	Если мНастройка=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не созданы настройки для операции произвольной загрузки по замеру ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	
	СвойстваЗамеров = новый ТаблицаЗначений;
	СвойстваЗамеров.Колонки.Добавить("Замер",новый ОписаниеТипов("СправочникСсылка.Замеры"));
	СвойстваЗамеров.Колонки.Добавить("Свойство",новый ОписаниеТипов("СправочникСсылка.Свойства"));
	СвойстваЗамеров.Колонки.Добавить("НомерВхода",новый ОписаниеТипов("Число"));
	СвойстваЗамеров.Колонки.Добавить("Ключ",новый ОписаниеТипов("СправочникСсылка.КлючиСобытия"));
	СвойстваЗамеров.Колонки.Добавить("ФильтрСвойство",новый ОписаниеТипов("СправочникСсылка.Свойства"));
	СвойстваЗамеров.Колонки.Добавить("ФильтрЗначение",новый ОписаниеТипов("Строка"));
	
	Для каждого стр из мНастройка.МассивСтруктурСвязейВходовДанных Цикл
		стр_н = СвойстваЗамеров.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
	КонецЦикла;

	
	// Загрузим нейронную сеть
	СохранятьЗначенияПреобразованияСигналов = мНастройка.СохранятьЗначенияПреобразованияСигналов;
	ИспользоватьФильтрыДанныхЗамеров = Ложь;
	Если НЕ мНастройка.Свойство("ИспользоватьФильтрыДанныхЗамеров",ИспользоватьФильтрыДанныхЗамеров) Тогда
		ИспользоватьФильтрыДанныхЗамеров = Ложь;
	КонецЕсли; 
	НечеткийКонтроллер = мНастройка.НечеткийКонтроллер;
	Модель = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(НечеткийКонтроллер,"Модель");
	FuzzyModel = Неопределено;
	FuzzyModel = ЗагрузитьПроектXML(Модель);
	Если FuzzyModel=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не загруженна модель нейронной сети ("+НечеткийКонтроллер+")для замера ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	
	//инициализация фильтров
	РеквизитыЗамера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Замер, "ФильтрТипСобытия,ФильтрСвойстваСобытия,ФильтрСвойстваСобытияКроме,ФильтрДлительность,НачалоПериода,КонецПериода,ТипЗамера,ДополнительнаяОбработка");
	НачалоПериода 	= РеквизитыЗамера.НачалоПериода;
	КонецПериода 	= РеквизитыЗамера.КонецПериода;
	РеквизитыЗамера.Вставить("ФильтрТипСобытия", РеквизитыЗамера.ФильтрТипСобытия.Получить());
	ЕстьФильтрТипСобытия = РеквизитыЗамера.ФильтрТипСобытия<>Неопределено И РеквизитыЗамера.ФильтрТипСобытия.Количество()>0;
	ЕстьФильтрСвойстваСобытия = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрСвойстваСобытия);
	ЕстьФильтрДлительность = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрДлительность); 
	
	НавигационнаяСсылка = "/Замер/("+Замер.UUID()+")";
	ФайлЗамера = Справочники.ФайлыЗамера.ПолучитьФайлПоПолномуИмени(Замер, НавигационнаяСсылка);
	
	//еще раз проверим прочитан полностью
	СостояниеЧтения = РегистрыСведений.СостояниеЧтения.ПолучитьСостояние(ФайлЗамера);
	Если СостояниеЧтения.ЧтениеЗавершено Тогда
		Возврат 0;
	КонецЕсли;		
	
	РазмерФайла = 0;
	
	ДатаНачалаЧтения = ТекущаяДата();
	
	//по факту - количество прочитанных данных
	ПрочитаноСтрок 			= СостояниеЧтения.ПрочитаноСтрок;
	ДатаПрочитанныхДанных 	= СостояниеЧтения.ДатаПрочитанныхДанных;
	
	// читаем в границе
	Если ДатаПрочитанныхДанных<НачалоПериода Тогда
		ДатаПрочитанныхДанных = НачалоПериода;
	КонецЕсли;
	
	//часть реквизитов будет одинакова для всего файла
	СтруктураЗаписи 			= ОбновлениеДанных.ПолучитьСтруктуруЗаписиСправочник();
	СтруктураЗаписи.Владелец 	= Замер;
	СтруктураЗаписи.Файл 		= ФайлЗамера;
	
	
	Если НЕ (ЗначениеЗаполнено(КонецПериода) И КонецПериода<ТекущаяДата()) Тогда
		КонецПериода = ТекущаяДата();
		КонецПериода = ОкруглитьДоМинуты(КонецПериода);
	КонецЕсли;
	
	ЕстьДанныеДляОбработки = Истина;	
	
	Запрос = новый Запрос;
	
	Если ИспользоватьФильтрыДанныхЗамеров=Истина Тогда
		Запрос.Текст ="ВЫБРАТЬ
		|	Т.Замер КАК Замер,
		|	Т.Свойство КАК Свойство,
		|	Т.Ключ КАК Ключ,
		|	ВЫРАЗИТЬ(Т.НомерВхода КАК ЧИСЛО) КАК НомерВхода,
		|	Т.ФильтрСвойство КАК ФильтрСвойство,
		|	ВЫРАЗИТЬ(Т.ФильтрЗначение КАК СТРОКА(150)) КАК ФильтрЗначение
		|ПОМЕСТИТЬ ВтТЗ
		|ИЗ
		|	&ТЗ КАК Т
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 300
		|	Т.ЗначениеЧисло КАК ЗначениеЧисло,
		|	Т.Свойство КАК Свойство,
		|	Т.Свойство.Наименование КАК СвойствоНаименование,
		|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия,
		|	ВтТЗ.НомерВхода КАК НомерВхода
		|ИЗ
		|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТЗ КАК ВтТЗ
		|		ПО Т.Ссылка.Владелец = ВтТЗ.Замер
		|		И Т.Свойство = ВтТЗ.Свойство
		|		И Т.Ссылка.Ключ = ВтТЗ.Ключ
		|		ВНУТРЕННЕЕ соединение Справочник.СобытияЗамера.КлючевыеСвойства как Фильтр
		|		по Фильтр.Ссылка = Т.Ссылка
		|		И Фильтр.Ссылка.ДатаСобытия > &ДатаНачала
		|		И Фильтр.Ссылка.ДатаСобытия < &ДатаОкончания
		|		И (Фильтр.Свойство, Выразить(Фильтр.Значение как Строка(150))) В
		|			(ВЫБРАТЬ
		|				Т.ФильтрСвойство,
		|				Т.ФильтрЗначение
		|			ИЗ
		|				ВтТЗ КАК Т)
		|ГДЕ
		|	Т.Ссылка.ДатаСобытия > &ДатаНачала
		|	И Т.Ссылка.ДатаСобытия < &ДатаОкончания
		|	И (Т.Ссылка.Владелец, Т.Свойство) В
		|		(ВЫБРАТЬ
		|			Т.Замер,
		|			Т.Свойство
		|		ИЗ
		|			ВтТЗ КАК Т)
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия,
		|	Т.Свойство,
		|	НомерВхода";		
	Иначе
		Запрос.Текст ="ВЫБРАТЬ
		|	Т.Замер КАК Замер,
		|	Т.Свойство КАК Свойство,
		|	Т.Ключ КАК Ключ,
		|	ВЫРАЗИТЬ(Т.НомерВхода КАК ЧИСЛО) КАК НомерВхода
		|ПОМЕСТИТЬ ВтТЗ
		|ИЗ
		|	&ТЗ КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 300
		|	Т.ЗначениеЧисло КАК ЗначениеЧисло,
		|	Т.Свойство КАК Свойство,
		|	Т.Свойство.Наименование КАК СвойствоНаименование,
		|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия,
		|	ВтТЗ.НомерВхода КАК НомерВхода
		|ИЗ
		|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТЗ КАК ВтТЗ
		|		ПО Т.Ссылка.Владелец = ВтТЗ.Замер
		|		И Т.Свойство = ВтТЗ.Свойство
		|		И Т.Ссылка.Ключ = ВтТЗ.Ключ
		|ГДЕ
		|	Т.Ссылка.ДатаСобытия > &ДатаНачала
		|	И Т.Ссылка.ДатаСобытия < &ДатаОкончания
		|	И (Т.Ссылка.Владелец, Т.Свойство) В
		|		(ВЫБРАТЬ
		|			Т.Замер,
		|			Т.Свойство
		|		ИЗ
		|			ВтТЗ КАК Т)
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия,
		|	Т.Свойство,
		|	НомерВхода";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ТЗ",СвойстваЗамеров);
	
	СвойствоРешение = СправочникиСерверПовтИсп.ПолучитьСвойство("decision");
	СвойствоРешенияОписание = СправочникиСерверПовтИсп.ПолучитьСвойство("decision desc");
	
	ЗащитаОтЗацикливанияПоПериоду = Дата(1,1,1);
	
	Пока ЕстьДанныеДляОбработки=Истина Цикл
		
		Если ДатаПрочитанныхДанных=КонецПериода Тогда
			Прервать;
		КонецЕсли;
		
		// если у нас остается в таблице одна запись, которая будет игнорироваться, чтобы она не прыгала
		// ограничим
		Если ДатаПрочитанныхДанных=ЗащитаОтЗацикливанияПоПериоду И ЗащитаОтЗацикливанияПоПериоду<>Дата(1,1,1) Тогда
			Прервать;
		Иначе
			ЗащитаОтЗацикливанияПоПериоду = ДатаПрочитанныхДанных;
		КонецЕсли;
		
		ПрочитаноСтрок = ПрочитаноСтрок+1;
		
		Запрос.УстановитьПараметр("ДатаНачала",ДатаПрочитанныхДанных);
		Запрос.УстановитьПараметр("ДатаОкончания",КонецПериода);
		
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		ЕстьДанныеДляОбработки = (ТаблицаДанных.Количество()>0);
		
		СоответствиеДат = новый Соответствие;
		
		Для каждого стр из ТаблицаДанных Цикл
			
			СтрукутраДанных = СоответствиеДат.Получить(стр.ДатаСобытия);
			
			Если СтрукутраДанных = Неопределено Тогда
				СтрукутраДанных = новый Структура();
				СтрукутраДанных.Вставить("ДатаСобытия",стр.ДатаСобытия);
				СтрукутраДанных.Вставить("input",новый Массив);
				СтрукутраДанных.input.Добавить(новый структура("СвойствоНаименование,НомерВхода,ЗначениеЧисло",стр.СвойствоНаименование,стр.НомерВхода,стр.ЗначениеЧисло));
				СоответствиеДат.Вставить(стр.ДатаСобытия,СтрукутраДанных);
			Иначе
				СтрукутраДанных.input.Добавить(новый структура("СвойствоНаименование,НомерВхода,ЗначениеЧисло",стр.СвойствоНаименование,стр.НомерВхода,стр.ЗначениеЧисло));
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого дата_стр из СоответствиеДат Цикл
			
			стр  = дата_стр.Значение;
			
			input = стр.input;
			
			Если ДатаПрочитанныхДанных < стр.ДатаСобытия Тогда
				ДатаПрочитанныхДанных = стр.ДатаСобытия;
			КонецЕсли;
			
			// количество сигналов должно быть равно количеству входов
			Если НЕ input.Количество()=FuzzyModel.Fuzzification.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			// формируем
			СтруктураОтвета = Неопределено;
			//СтруктураОтвета = FuzzyController(FuzzyModel); 
			// получим решение значений
			Inputs = новый Массив;
			Для каждого эл из input Цикл
				терм = DoFuzzification(FuzzyModel,FuzzyModel.Fuzzification[эл.НомерВхода].name,эл.ЗначениеЧисло);
				Inputs.Добавить(новый Структура("СвойствоНаименование,name,value",эл.СвойствоНаименование,FuzzyModel.Fuzzification[эл.НомерВхода].name,терм)); 				
			КонецЦикла;
			
			// получим решение контроллера
			Если FuzzyModel.OnlyFuzzification=Ложь Тогда
				СтруктураОтвета = DoDecision(FuzzyModel,Inputs);
			КонецЕсли;
			
			СтруктураЗаписи.ДатаСобытия 	= стр.ДатаСобытия;
			СтруктураЗаписи.КлючевыеСвойства.Очистить();
			
			// запишем результаты термов
			Если СохранятьЗначенияПреобразованияСигналов=Истина Тогда
				Для каждого эл из Inputs Цикл
					Свойство = СправочникиСерверПовтИсп.ПолучитьСвойство(эл.СвойствоНаименование);
					СтруктураЗаписи.КлючевыеСвойства.Вставить(Свойство, эл.value);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоРешение, СтруктураОтвета.decision);
			СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоРешенияОписание, СтруктураОтвета.description);

			Справочники.СобытияЗамера.ЗаписатьСобытиеЧисло(СтруктураЗаписи);
			
		КонецЦикла;
		
		
	КонецЦикла;
	
	
	
	// Обновление инфорации о количестве прочитанных строк
	РегистрыСведений.СостояниеЧтения.УстановитьСостояние(
		ФайлЗамера, 
		ДатаНачалаЧтения,
		ПрочитаноСтрок, 
		ДатаНачалаЧтения,
		РазмерФайла,
		ДатаПрочитанныхДанных);

	Возврат 0;
	
	
КонецФункции

Функция ОкруглитьДоМинуты(ПараметрДата,НаправлениеВверх=Истина)
	
	Секунды = Секунда(ПараметрДата);
	Если НаправлениеВверх=Истина Тогда
		ВремяОкругления = ПараметрДата-Секунды+60;
	Иначе
		ВремяОкругления = ПараметрДата-Секунды;
	КонецЕсли;
	
	Возврат ВремяОкругления;
	
КонецФункции

#КонецОбласти

#Область НечеткийКонтроллер

// выполнить фуззификацию сигналов
Функция DoFuzzification(FuzzyLogic,Name,Value)
	
	терм = "undefined";
	
	// обработаем сигнал с именем name и значением value
	func = Неопределено;
	// найдем функцию фаззификации сигнала
	Для каждого стр из FuzzyLogic.fuzzification Цикл
		Если стр.name=Name Тогда
			func = стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// если не нашли
	Если func=Неопределено Тогда
		терм = "error fuzzification";
		Возврат терм;
	КонецЕсли;
	
	// выполняем
	Если func.type="2" Тогда
		Если func.LowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.LowTo<=Value Тогда
			терм = func.logvalues[1].value;
		КонецЕсли;
	ИначеЕсли func.type="3" Тогда
		Если func.LowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.MediumFrom<=Value И func.MediumTo>Value Тогда
			терм = func.logvalues[1].value;
		ИначеЕсли func.HighFrom<=Value Тогда
			терм = func.logvalues[2].value;
		КонецЕсли;
	ИначеЕсли func.type="5" Тогда
		Если func.VeryLowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.LowFrom<=Value И func.LowTo>Value Тогда
			терм = func.logvalues[1].value;
		ИначеЕсли func.MediumFrom<=Value И func.MediumTo>Value Тогда
			терм = func.logvalues[2].value;
		ИначеЕсли func.HighFrom<=Value И func.HighTo>Value Тогда
			терм = func.logvalues[3].value;
		ИначеЕсли func.VeryHighFrom<=Value Тогда
			терм = func.logvalues[4].value;
		КонецЕсли;
	ИначеЕсли func.type="7" Тогда
		Если func.ExtraLowTo>Value Тогда
			терм = func.logvalues[0].value;
		ИначеЕсли func.VeryLowFrom<=Value И func.VeryLowTo>Value Тогда
			терм = func.logvalues[1].value;
		ИначеЕсли func.LowFrom<=Value И func.LowTo>Value Тогда
			терм = func.logvalues[2].value;
		ИначеЕсли func.MediumFrom<=Value И func.MediumTo>Value Тогда
			терм = func.logvalues[3].value;
		ИначеЕсли func.HighFrom<=Value И func.HighTo>Value Тогда
			терм = func.logvalues[4].value;
		ИначеЕсли func.VeryHighFrom<=Value И func.VeryHighTo>Value Тогда
			терм = func.logvalues[5].value;
		ИначеЕсли func.ExtraHighFrom<=Value Тогда
			терм = func.logvalues[6].value;
		КонецЕсли;
	Иначе
		терм = XMLСтрока(Value);
	КонецЕсли;
		
	
	Возврат терм;
	
КонецФункции

Функция DoDecision(FuzzyLogic,Inputs)
	
	СтруктураРешения = новый Структура("decision,description","undefined","");
	
	СоответсвиеВходов = новый Соответствие;
	Для каждого стр из Inputs Цикл
		СоответсвиеВходов.Вставить(стр.name,стр.value);
	КонецЦикла;
	
	// TODO: нужно учесть порядок
	// TODO: элементы со * проверять в последнюю очередь
	// и чем больше звездочек, тем позже
	// обработаем сигнал с именем name и значением value
	Для каждого rule из FuzzyLogic.FuzzyController.Rules Цикл
		
		РешениеНайденно = Истина;
		decision = "";
		description = "";
		
		Для каждого элемент из rule Цикл
			
			Если элемент.name="decision" Тогда
				decision = элемент.value;
			КонецЕсли;
			
			Если элемент.name="description" Тогда
				description = элемент.value;
			КонецЕсли;
			
			Если элемент.name="decision" ИЛИ элемент.name="description" ИЛИ элемент.name="priority" Тогда
				Продолжить;
			КонецЕсли;
			
			Если элемент.value="*" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СоответсвиеВходов.Получить(элемент.name)=элемент.value Тогда
				РешениеНайденно=Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РешениеНайденно=Истина Тогда
			СтруктураРешения.decision = decision;
			СтруктураРешения.description = description;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРешения;
	
КонецФункции	

Функция ЗагрузитьПроектXML(ФайлСтрокой)
	
	FuzzyLogic = Новый Структура();
	
	FuzzyController = новый Массив;
	Fuzzification = новый Массив;
	Decisions = новый Массив;
	Rules = новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(ФайлСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "project" Тогда
			FuzzyLogic.Вставить("author",ЧтениеXML.ПолучитьАтрибут("author"));
			FuzzyLogic.Вставить("url",ЧтениеXML.ПолучитьАтрибут("url"));
			FuzzyLogic.Вставить("verion",ЧтениеXML.ПолучитьАтрибут("verion"));
			FuzzyLogic.Вставить("type",ЧтениеXML.ПолучитьАтрибут("type"));
			FuzzyLogic.Вставить("OnlyFuzzification",Булево(ЧтениеXML.ПолучитьАтрибут("OnlyFuzzification")));
		ИначеЕсли ЧтениеXML.Имя = "description"  И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();	
			FuzzyLogic.Вставить("description",ЧтениеXML.Значение);
		ИначеЕсли  ЧтениеXML.Имя = "description" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Комментарий = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "fuzzylogic" Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "fuzzylogic" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				ИначеЕсли ЧтениеXML.Имя = "fuzzification" Тогда
					Fuzzification = Новый Массив;
					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.Имя = "fuzzification" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							Прервать;
						ИначеЕсли ЧтениеXML.Имя = "input" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							Структура = новый Структура();
							Структура.Вставить("name",ЧтениеXML.ПолучитьАтрибут("name"));
							Структура.Вставить("type",ЧтениеXML.ПолучитьАтрибут("type"));
							
							Структура.Вставить("VeryLowFrom",Число(ЧтениеXML.ПолучитьАтрибут("VeryLowFrom")));
							Структура.Вставить("VeryLowTo",Число(ЧтениеXML.ПолучитьАтрибут("VeryLowTo")));
							Структура.Вставить("LowFrom",Число(ЧтениеXML.ПолучитьАтрибут("LowFrom")));
							Структура.Вставить("LowTo",Число(ЧтениеXML.ПолучитьАтрибут("LowTo")));
							Структура.Вставить("MediumFrom",Число(ЧтениеXML.ПолучитьАтрибут("MediumFrom")));
							Структура.Вставить("MediumTo",Число(ЧтениеXML.ПолучитьАтрибут("MediumTo"))); 							
							Структура.Вставить("HighFrom",Число(ЧтениеXML.ПолучитьАтрибут("HighFrom")));
							Структура.Вставить("HighTo",Число(ЧтениеXML.ПолучитьАтрибут("HighTo")));
							Структура.Вставить("VeryHighFrom",Число(ЧтениеXML.ПолучитьАтрибут("VeryHighFrom")));
							Структура.Вставить("VeryHighTo",Число(ЧтениеXML.ПолучитьАтрибут("VeryHighTo")));
							
						ИначеЕсли ЧтениеXML.Имя = "input" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							
							Fuzzification.Добавить(Структура);

						ИначеЕсли ЧтениеXML.Имя = "logvalues" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
							
							LogValues = Новый Массив;
							Пока ЧтениеXML.Прочитать() Цикл
								Если ЧтениеXML.Имя = "logvalues" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Структура.Вставить("LogValues",LogValues);
									Прервать;
								ИначеЕсли ЧтениеXML.Имя = "item" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									item = новый Структура();
									item.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									item.Вставить("synonym",ЧтениеXML.ПолучитьАтрибут("synonym"));
									LogValues.Добавить(item);
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЧтениеXML.Имя = "fuzzycontroller" Тогда
					FuzzyController = новый Структура;
 					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.Имя = "fuzzycontroller" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
							FuzzyController.Вставить("Decisions",Decisions);
							FuzzyController.Вставить("Rules",Rules);
							Прервать;
						ИначеЕсли ЧтениеXML.Имя = "decisions" Тогда
							Decisions = новый Массив;
							Пока ЧтениеXML.Прочитать() Цикл
								Если ЧтениеXML.Имя = "decisions" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Прервать;
								ИначеЕсли ЧтениеXML.Имя = "decision" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("decision",ЧтениеXML.ПолучитьАтрибут("decision"));
									Структура.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									Структура.Вставить("description",ЧтениеXML.ПолучитьАтрибут("description"));
									Decisions.Добавить(Структура);
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли  ЧтениеXML.Имя="rules" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента  Тогда
							Rules = новый Массив;
							Rule = новый Массив;
							Пока ЧтениеXML.Прочитать() Цикл
								Если ЧтениеXML.Имя = "rules" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Прервать;
								ИначеЕсли ЧтениеXML.Имя = "rule" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Rule = новый Массив;
								ИначеЕсли ЧтениеXML.Имя = "rule" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
									Rules.Добавить(Rule);
								ИначеЕсли ЧтениеXML.Имя = "input" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("type","item");
									Структура.Вставить("name",ЧтениеXML.ПолучитьАтрибут("name"));
									Структура.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									Rule.Добавить(Структура);
								ИначеЕсли ЧтениеXML.Имя = "decision" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("type","decision");
									Структура.Вставить("name","decision");
									Структура.Вставить("value",ЧтениеXML.ПолучитьАтрибут("value"));
									Rule.Добавить(Структура);
								ИначеЕсли ЧтениеXML.Имя = "description" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
									Структура = новый Структура();
									Структура.Вставить("type","description");
									Структура.Вставить("name","description");
									ЧтениеXML.Прочитать();
									Структура.Вставить("value",ЧтениеXML.Значение);
									Rule.Добавить(Структура);
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	FuzzyLogic.Вставить("FuzzyController",FuzzyController);
	FuzzyLogic.Вставить("Fuzzification",Fuzzification);
	
	Возврат FuzzyLogic;
КонецФункции

#КонецОбласти
