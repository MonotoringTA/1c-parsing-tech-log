&НаКлиенте
Перем СтарыеКолонки;
&НаКлиенте
Перем СписокИнформационныхБаз;
&НаКлиенте
Перем СписокПроцессов;
&НаКлиенте
Перем СоответсвиеСинонимовСвойств;
&НаКлиенте
Перем ДанныеБыстрогоОтбора;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// сменим представление полей, т.к. косяк в 1С
	#Если ВебКлиент Тогда
		СменитьВидЭлемента("Список,ИнтервалИстории");
	#КонецЕсли
	
	СоответсвиеСинонимовСвойств = ПолучитьСоответсвиеСинонимовСвойств();
	ЗагрузитьНастройки(Неопределено);
	Если НЕ ЗначениеЗаполнено(Список) Тогда
		Список="session";
	КонецЕсли;
	Элементы.Список.СписокВыбора.Добавить("infobase","инф. базы");
	Элементы.Список.СписокВыбора.Добавить("server","сервера");
	Элементы.Список.СписокВыбора.Добавить("manager","менеджеры");
	Элементы.Список.СписокВыбора.Добавить("process","процессы");
	Элементы.Список.СписокВыбора.Добавить("process licenses","проц. лиц.");
	Элементы.Список.СписокВыбора.Добавить("connection","соединения");
	Элементы.Список.СписокВыбора.Добавить("session","сеансы");
	Элементы.Список.СписокВыбора.Добавить("session licenses","сеансы лиц.");
	ПоляТаблицыДанных(Неопределено);
	
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*25,"1 д 1ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*24,"1 д");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*12,"12 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*6,"6 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*3,"3 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*2,"2 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*1.5,"1 ч 30 мин");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60,"1 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*30,"30 мин");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*15,"15 мин");
	
	Если НЕ ЗначениеЗаполнено(ИнтервалИстории) Тогда
		ИнтервалИстории = 60*60*2;
	КонецЕсли;
	
	СтарыеКолонки = новый Массив;
	
	СоздатьИОбновитьКолонкиПустыеКолонки();
	
	АвтообновлениеПриИзменении(Неопределено);
	НаименованиеФоновогоЗадания = "Обновление Монитор RAS 1C - "+ПользователиВызовСервера.ТекущийПользователь();
	
КонецПроцедуры

&НаСервере
Процедура СменитьВидЭлемента(ИменаЭлементов)	
	МассивИмен = СтрРазделить(ИменаЭлементов,",");
	
	Для каждого ИмяЭлемента из МассивИмен Цикл
		мЭлемент = Элементы.Найти(ИмяЭлемента);
		Если мЭлемент=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мЭлемент.Вид=ВидПоляФормы.ПолеВвода;
		мЭлемент.КнопкаВыпадающегоСписка = Истина;
		мЭлемент.РежимВыбораИзСписка = Истина;
	КонецЦикла;
КонецПроцедуры


#Область НайтиДанные

&НаКлиенте
Процедура НайтиПредустановкойОтбора(Команда)
	
	Элемент = Элементы.ТаблицаДанных.ТекущийЭлемент;
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;

	ФиксированныйОтбор = Новый ФиксированнаяСтруктура(ДанныеБыстрогоОтбора.Имя,ДанныеБыстрогоОтбора.Данные);
	Элементы.ТаблицаДанных.ОтборСтрок = ФиксированныйОтбор;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПриАктивизацииЯчейки(Элемент)
	
	Если Элемент=Неопределено ИЛИ Элемент.ТекущиеДанные=Неопределено ИЛИ Элемент.ТекущийЭлемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Имя = СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"ТаблицаДанных","");
	ДанныеБыстрогоОтбора = новый Структура("Имя,Данные",Имя,Элемент.ТекущиеДанные[Имя]);
	//Элементы.ТаблицаДанныхКонтекстноеМенюНайтиПредустановкойОтбора.Заголовок = "Найти '"+Лев(Строка(ДанныеБыстрогоОтбора.Данные),15)+"...'";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтбор(Команда)
	Элементы.ТаблицаДанных.ОтборСтрок = новый ФиксированнаяСтруктура();
КонецПроцедуры



#КонецОбласти

#Область Автообновление

&НаКлиенте
Процедура АвтообновлениеПроцедура()
	ПолучтьСписокНаКлиенте(Список);
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПриИзменении(Элемент)
	Если Автообновление=Истина Тогда
		ПодключитьОбработчикОжидания("АвтообновлениеПроцедура", 60);
	Иначе
		ОтключитьОбработчикОжидания("АвтообновлениеПроцедура");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФоновоеОбновлениеДанных

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаДополнительнуюОбработку()
	
	ДополнительнаяОбработка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеОтчетыИОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта
	|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИмяОбъекта", "МониторRAS_1C");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДополнительнаяОбработка = Выборка.Ссылка;
	КонецЕсли;	
	
	Возврат ДополнительнаяОбработка;	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеФоново(ТекущиеДанные) Экспорт
		
	мПараметры = СформироватьСтруктуруЗапроса(ТекущиеДанные);
	СведенияФЗ = ЗапуститьЗадание24(АдресХранилища,Список,мПараметры.cluster,мПараметры,новый УникальныйИдентификатор(),НаименованиеФоновогоЗадания);
	ФЗ = СведенияФЗ.УникальныйИдентификатор;
	ПодключитьОбработчикОжидания("МенеджерФоновыхЗаданий",1);
	
КонецПроцедуры

&НаСервереБезКонтекста
//&НаСервере
Функция ЗапуститьЗадание24(АдресХранилища,list,cluster,мПараметры,УникальныйИдентификатор,НаименованиеФоновогоЗадания)

	ЗаданиеРезультат = Неопределено;
	
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено,УникальныйИдентификатор);
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("АдресХранилища",АдресХранилища);
	ПараметрыКоманды.Вставить("cluster",cluster);
	ПараметрыКоманды.Вставить("list",list);
	ПараметрыКоманды.Вставить("мПараметры",мПараметры);
	ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка",ПолучитьСсылкуНаДополнительнуюОбработку());
	ПараметрыКоманды.Вставить("ИдентификаторКоманды","ПолучитьДанныеКластераФоново");
	
	
	//РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	//РеквизитОбъект.ВыполнитьКоманду("ПолучитьДанныеКластераФоново",ПараметрыКоманды);
	
	мМассив = новый Массив;
	мМассив.Добавить(ПараметрыКоманды);
	мМассив.Добавить(АдресХранилища);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ДополнительныеОтчетыИОбработки.ВыполнитьКоманду", мМассив,,НаименованиеФоновогоЗадания);
	
	ЗаданиеРезультат = новый Структура("УникальныйИдентификатор,Состояние,ИмяМетода,ИнформацияОбОшибке");

	ЗаполнитьЗначенияСвойств(ЗаданиеРезультат,ФоновоеЗадание);
	
	ЗаданиеРезультат.Состояние = Строка(ЗаданиеРезультат.Состояние);
	
	Возврат ЗаданиеРезультат;
КонецФункции // ЗапуститьЗадание24

&НаКлиенте
Процедура МенеджерФоновыхЗаданий() Экспорт
	
	СведенияФЗ = ПолучитьСведенияФЗ(ФЗ);
	Если СведенияФЗ.Состояние = "Завершено" Тогда		
		
		Попытка
			
			СтруктураДанныхОтвета = ПолучитьИзВременногоХранилища(АдресХранилища);
			УдалитьИзВременногоХранилища(АдресХранилища);
		
			ОбработатьОтображениеДанных(СтруктураДанныхОтвета);
			
		Исключение
		КонецПопытки;
		
		ОтключитьОбработчикОжидания("МенеджерФоновыхЗаданий");
		ФЗ = "";
	ИначеЕсли СведенияФЗ.Состояние = "Ошибка" Тогда
		Сообщить(СведенияФЗ.ТекстОшибки);
		ФЗ = "";
	Иначе
		// выполняется
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведенияФЗ(ФЗ)
	Результат = Новый Структура("Состояние,ТекстОшибки,Конец",Неопределено,Неопределено,Неопределено);
	Данные = РегламентныеЗаданияСлужебный.ПолучитьСвойстваФоновогоЗадания(ФЗ, "Состояние,ИнформацияОбОшибке,Конец");
	Если Данные = Неопределено Тогда
		Результат.Состояние = "Ошибка";
		Результат.ТекстОшибки = "[Не найдено фоновое задание]";
	Иначе
		Если Данные.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Результат.Состояние = "Выполняется";
		ИначеЕсли Данные.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Состояние = "Завершено";
			Результат.Конец = Данные.Конец;
		Иначе
			Результат.Состояние = "Ошибка";
			Результат.Конец = Данные.Конец;
			Результат.ТекстОшибки = РегламентныеЗаданияСлужебный.СообщенияИОписанияОшибокФоновогоЗадания(ФЗ);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти 



&НаКлиенте
Процедура ЗамерПриИзменении(Элемент)
	ЗагрузитьНастройки(Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответсвиеСинонимовСвойств()
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	возврат РеквизитОбъект.ПолучитьПолноеСоответствиеСвойств();
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	Попытка
		мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
		Если мНастройка<>Неопределено Тогда
			КодировкаТекстаФайла = мНастройка.КодировкаТекстаФайла;
			ПутьКИсполняемомуФайлуRAC = мНастройка.ПутьКИсполняемомуФайлуRAC;
	
			Корзина.Очистить();
			Для каждого стр из мНастройка.Корзина Цикл
				стр_н = Корзина.Добавить();
				ЗаполнитьЗначенияСвойств(стр_н,стр);
			КонецЦикла;
			
			ТаблицаКластеров.Очистить();
			Для каждого стр из мНастройка.Кластеры Цикл
				стр_н = ТаблицаКластеров.Добавить();
				ЗаполнитьЗначенияСвойств(стр_н,стр);
				стр_н.key = стр_н.server+"("+Формат(стр_н.port_ras,"ЧРГ=' '")+")->"+стр_н.name;
			КонецЦикла;
	
			Попытка
				ТаблицаСуждений.Очистить();
				Для каждого стр из мНастройка.Суждения Цикл
					стр_н = ТаблицаСуждений.Добавить();
					ЗаполнитьЗначенияСвойств(стр_н,стр);
				КонецЦикла;			
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	Исключение
		Сообщить("Не верные настройки. Выберете данные!");
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаКластеровВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	ПолучтьСписокНаКлиенте(Список);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКластеровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПолучтьСписокНаКлиенте(Список);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	// сбросим сортировку	
	ИмяКолонкиСортировки = "";
	Если Элементы.КартинкаИстория.Видимость = Ложь Тогда
		ПолучтьСписокНаКлиенте(Список);
	Иначе
		ОбновитьТаблицуДаннымиИзИстории("без изменений");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьДанные(Команда)
	//TODO: фоновое обновление
	ПолучтьСписокНаКлиенте(Список);
КонецПроцедуры


&НаКлиенте
Процедура ПолучтьСписокНаКлиенте(list)
	
	ТекущиеДанные = Элементы.ТаблицаКластеров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// сбросим флаг текущий
	Для каждого стр из ТаблицаКластеров Цикл
		стр.current = Ложь;
	КонецЦикла;
	
	ТекущиеДанные.current = Истина;
	ДатаОбновления = ТекущаяДата();
	
	Если НеИспользоватьФоновоеОбновлениеДанных=Истина Тогда	
		
		мПараметры = СформироватьСтруктуруЗапроса(ТекущиеДанные);
	
		СтруктураДанныхОтвета = ПолучитьСписок(мПараметры,list);
		СтруктураДанныхОтвета.Вставить("list",list);
		СтруктураДанныхОтвета.Вставить("cluster",мПараметры.cluster);
		
		ОбработатьОтображениеДанных(СтруктураДанныхОтвета);
	Иначе
		
		ОбновитьДанныеФоново(ТекущиеДанные);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте	
Процедура ОбработатьОтображениеДанных(СтруктураДанныхОтвета)	

	Элементы.КартинкаИстория.Видимость = Ложь;
	Элементы.ДатаОбновления.ЦветФона = новый Цвет();

	list = СтруктураДанныхОтвета.list;
	cluster = СтруктураДанныхОтвета.cluster;
	
	Если list="infobase" Тогда
		СписокИнформационныхБаз = СтруктураДанныхОтвета.МассивСоответствиеДанных;
	КонецЕсли;	
	
	ДлительностьЗапроса = СтруктураДанныхОтвета.Длительность;
	
	ДобавитьПредставлениеInfobase(СтруктураДанныхОтвета.МассивСоответствиеДанных);
	
	СоздатьИОбновитьКолонки(СтруктураДанныхОтвета.МассивСоответствиеДанных,list);
	
	ВычислитьФункцииАгрегации(СтруктураДанныхОтвета.МассивСоответствиеДанных,list,cluster);
	
	ЗаполнитьТаблицуСвойств(СтруктураДанныхОтвета.МассивСоответствиеДанных,list);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляТаблицыДанных(Команда)
	Элементы.ТаблицаСвойств.Видимость = НЕ Элементы.ТаблицаСвойств.Видимость;
	Элементы.ТаблицаДанныхПоляТаблицыДанных.Пометка = Элементы.ТаблицаДанныхПоляТаблицыДанных.Пометка;  
КонецПроцедуры



&НаСервере
Функция ПолучитьСписок(мПараметры,list)
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	возврат РеквизитОбъект.ПолучитьСписок(мПараметры,list)
КонецФункции

&НаКлиенте
Функция СформироватьСтруктуруЗапроса(Знач ТекущиеДанные)
	
	мПараметры = новый Структура();
	мПараметры.Вставить("ПутьКИсполняемомуФайлуRAC",ПутьКИсполняемомуФайлуRAC);
	мПараметры.Вставить("КодировкаТекстаФайла",КодировкаТекстаФайла);
	Если НЕ ТекущиеДанные=Неопределено Тогда
		мПараметры.Вставить("server",ТекущиеДанные.server);
		мПараметры.Вставить("port_ras",ТекущиеДанные.port_ras);
		мПараметры.Вставить("cluster",ТекущиеДанные.cluster);
		мПараметры.Вставить("cluster_user",ТекущиеДанные.cluster_user);
		мПараметры.Вставить("cluster_pwd",ТекущиеДанные.cluster_pwd);
		cluster = ТекущиеДанные.cluster;
	Иначе
		мПараметры.Вставить("server","");
		мПараметры.Вставить("port_ras",1545);
		мПараметры.Вставить("cluster","");
		мПараметры.Вставить("cluster_user","");
		мПараметры.Вставить("cluster_pwd","");
		cluster = "";
	КонецЕсли;
	
	КлючКластера = ТекущиеДанные.key;

	Возврат мПараметры;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСвойств(Знач МассивСоответствиеДанных,Знач list)
	
	Перем стр, стр_н;
	
	ТаблицаСвойств.Очистить();
	
	Для каждого стр из МассивСоответствиеДанных Цикл
		Для каждого эл из стр Цикл
			Описание = СоответсвиеСинонимовСвойств.Получить(list+"/"+эл.Ключ);
			стр_н = ТаблицаСвойств.Добавить();
			стр_н.use = Истина;
			стр_н.name = эл.Ключ;
			стр_н.list = list; 
			стр_н.type = ?(Описание=Неопределено,ТипЗнч(эл.Значение),Описание.Тип); 
			стр_н.synonim = ?(Описание=Неопределено,"",Описание.Синоним);
		КонецЦикла;
		Прервать;
	КонецЦикла;
	
	// проставим флажки
	СоответствиеКолонок = новый Соответствие();
	
	Для каждого стр из СтарыеКолонки Цикл
		СоответствиеКолонок.Вставить(стр.Ключ,стр);
	КонецЦикла;
	
	Для каждого стр из ТаблицаСвойств Цикл
		Колонка = СоответствиеКолонок.Получить(стр.name);
		Если Колонка=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		стр.use = Колонка.Видимость;
	КонецЦикла;	
	

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДополнительныеСвойстваВыбранногоЭлементаДанных(Команда)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для каждого стр из ТаблицаСвойств Цикл
		стр.use = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для каждого стр из ТаблицаСвойств Цикл
		стр.use = Истина;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВычислитьФункцииАгрегации(Знач МассивСоответствиеДанных,Знач list, Знач cluster)
	
	МассивСтруктурАгрегацииДанных = ВычислитьФункцииАгрегацииСервер(МассивСоответствиеДанных, Корзина, list, cluster);
	
	// очистили
	ТаблицаАгрегацииДанных.Очистить();	
	
	Для каждого стр из МассивСтруктурАгрегацииДанных Цикл
		стр_н = ТаблицаАгрегацииДанных.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н,стр);
		УстановитьУровеньПроблемыСтроки(стр_н,Ложь);
	КонецЦикла;
	
	Если НЕ ТекущаяСтрокаАгрегации=Неопределено Тогда
		н_строки = ТаблицаАгрегацииДанных.НайтиСтроки(ТекущаяСтрокаАгрегации);
		Если н_строки.Количество()>0 Тогда
			Элементы.ТаблицаАгрегацииДанных.ТекущаяСтрока=н_строки[0].ПолучитьИдентификатор();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУровеньПроблемыСтроки(стр,ЭтоТаблица=Истина)
	
	decision = "";  	
	
	Если ЭтоТаблица И стр.func="" Тогда
		
		Источник = новый Структура("list,name,value,func,decision");
		Источник.list = Список;
		ЗаполнитьЗначенияСвойств(Источник,стр);
		// max
		Источник.func = "max";
		УстановитьУровеньПроблемыСтроки(Источник);
		// min
		Источник.func = "min";
		УстановитьУровеньПроблемыСтроки(Источник);
		стр.decision = Источник.decision;
		
		Возврат;
	
	КонецЕсли;
	
	Ключ = стр.list+"->"+стр.name+"("+стр.func+")";
	мОтбор = новый Структура("key",Ключ);
	
	н_строки = ТаблицаСуждений.НайтиСтроки(мОтбор);
	
	Если н_строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;  	
	
	СтрокаСуждения = н_строки[0];
	
	Если СтрокаСуждения.invert=Ложь Тогда 
		Если стр.value>СтрокаСуждения.attention_from Тогда
			decision="красный";
		ИначеЕсли стр.value>СтрокаСуждения.warning_from Тогда
			decision="желтый";
		КонецЕсли;		
	Иначе
		Если стр.value<СтрокаСуждения.attention_to Тогда
			decision="красный";
		ИначеЕсли стр.value<СтрокаСуждения.warning_to Тогда
			decision="желтый";
		КонецЕсли;		
	КонецЕсли;
	
	Если стр.decision="" Тогда
		стр.decision = decision;
	ИначеЕсли стр.decision="желтый" И decision="красный" Тогда
		стр.decision = decision;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВычислитьФункцииАгрегацииСервер(Знач МассивСоответствиеДанных,Знач Корзина, Знач list, Знач cluster)
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	МассивСтруктурАгрегацииДанных = РеквизитОбъект.ВычислитьФункцииАгрегации(МассивСоответствиеДанных, Корзина, list, cluster);
	
	Возврат МассивСтруктурАгрегацииДанных;
	
КонецФункции

&НаКлиенте
Процедура СоздатьИОбновитьКолонкиПустыеКолонки()
	
	Перем ИмяКолонки, Колонки, КС, КЧ, МассивТипов, ОписаниеТипов, ОписаниеЧисло, стр, стр_н, ш, элем;
	
	Колонки = новый Массив;
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Булево"));
	МассивТипов.Добавить(Тип("Дата"));
	КС = Новый КвалификаторыСтроки(200);
	КЧ = Новый КвалификаторыЧисла(20,3);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , ,КЧ, КС);
	ОписаниеЧисло = Новый ОписаниеТипов("Число", , ,КЧ);	
	
	Колонки = новый массив;
	
	Колонки.Добавить(новый Структура("Имя,Ключ,ТипСтрокой,ТипЗначения,Ширина,Заголовок,ИмяКолонки,ИмяСледующегоЭлемента,ТолькоПросмотр,Видимость",
	"empty","empty","Строка",ОписаниеТипов,10,"пусто (обновите данные)","empty",Неопределено,Истина,Истина));

	// создадим динамически таблицу 
	Попытка
		СоздатьДинамическиеКолонкиТаблицы("ТаблицаДанных",Колонки,СтарыеКолонки);
	Исключение
	КонецПопытки;
	
	
	СтарыеКолонки = Колонки;
		
	ТаблицаДанных.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИОбновитьКолонки(Знач МассивСоответствиеДанных,Знач list)
	
	Перем ИмяКолонки, Колонки, КС, КЧ, МассивТипов, ОписаниеТипов, ОписаниеЧисло, стр, стр_н, ш, элем;
	
	Колонки = новый Массив;
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Булево"));
	МассивТипов.Добавить(Тип("Дата"));
	КС = Новый КвалификаторыСтроки(200);
	КЧ = Новый КвалификаторыЧисла(20,3);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , ,КЧ, КС);
	ОписаниеЧисло = Новый ОписаниеТипов("Число", , ,КЧ);	
	
	Колонки = новый массив;   
	
	// СоответсвиеИменКолонок
	СоответсвиеИменКолонок = Новый Соответствие;
	
	
	Для каждого элем из МассивСоответствиеДанных Цикл	
		
		ш=0;
		Для каждого стр из элем Цикл
			ИмяКолонки = "колонка_"+Формат(ш,"ЧГ=;");
			СоответсвиеИменКолонок.Вставить(стр.Ключ,ИмяКолонки);
			Заголовок = стр.Ключ;
			Описание = СоответсвиеСинонимовСвойств.Получить(list+"/"+Заголовок);
			Если НЕ Описание=Неопределено Тогда
				Заголовок = Описание.Синоним;
			КонецЕсли;
			Колонки.Добавить(новый Структура("Имя,Ключ,ТипСтрокой,ТипЗначения,Ширина,Заголовок,ИмяКолонки,ИмяСледующегоЭлемента,ТолькоПросмотр,Видимость",ИмяКолонки,стр.Ключ,Строка(ТипЗнч(стр.Значение)),ОписаниеТипов,10,Заголовок,ИмяКолонки,Неопределено,Истина,Истина));
			ш=ш+1;
		КонецЦикла;
		прервать;
		
	КонецЦикла;
	
	// проверим на отличие колонок
	// если тот же список, то менять не надо
	Если НЕ СоставКолонокОдинаковый(Колонки, СтарыеКолонки) = Истина Тогда
	
		ПолучитьНастройкиКолонокТекущегоСписка(Колонки, list);
	
		// создадим динамически таблицу 
		Попытка
			СоздатьДинамическиеКолонкиТаблицы("ТаблицаДанных", Колонки, СтарыеКолонки);
		Исключение
		КонецПопытки;
	
		УстановитьУсловноеОформлениеТаблицыДанных(Колонки,list);
		
		СтарыеКолонки = Колонки;
	
	КонецЕсли;
			
	ТаблицаДанных.Очистить();
	источник = новый структура("name,value,func,decision","",0,"","");
	
	Для каждого элем из МассивСоответствиеДанных Цикл
		стр_н = ТаблицаДанных.Добавить();
		источник.decision="";
		ИмяКолонки_decision = Неопределено;
		ш=0;
		Для каждого стр из элем Цикл  
			ИмяКолонки = СоответсвиеИменКолонок.Получить(стр.Ключ);
			Если ИмяКолонки=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			стр_н[ИмяКолонки]=стр.Значение;
			ш=ш+1;
			источник.name = стр.Ключ;
			источник.value = стр.Значение;
			УстановитьУровеньПроблемыСтроки(источник);
			Если стр.Ключ="decision" Тогда
				ИмяКолонки_decision = ИмяКолонки;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ИмяКолонки_decision=Неопределено Тогда 
			стр_н[ИмяКолонки_decision] = источник.decision;
		КонецЕсли;
	КонецЦикла;

	СортироватьТаблицуДанных(ИмяКолонкиСортировки,);
	//Элементы.Декорация1.Видимость = ТаблицаДанных.Количество()=0;
	
КонецПроцедуры


&НаКлиенте
Функция СоставКолонокОдинаковый(Колонки1,Колонки2)
	
	КолонкиРавны = Истина;
	
	Если Колонки1.Количество()<>Колонки2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоответствиеКолонок1 = новый Соответствие();
	
	Для каждого стр из Колонки1 Цикл
		СоответствиеКолонок1.Вставить(стр.ИмяКолонки, стр);
	КонецЦикла;
		
	
	Для каждого стр из Колонки2 Цикл
		
		элем = СоответствиеКолонок1.Получить(стр.ИмяКолонки);
		
		Если элем=Неопределено Тогда
			КолонкиРавны = Ложь;
			Прервать;
		КонецЕсли;
		
		Если НЕ (элем.Заголовок=стр.Заголовок И элем.ТипСтрокой=стр.ТипСтрокой) Тогда
			КолонкиРавны = Ложь;
			Прервать;
		КонецЕсли;		
		
	КонецЦикла;

	
	Возврат КолонкиРавны;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьКолонок(list)
	
	СоответствиеКолонок = новый Соответствие();
	
	Для каждого стр из СтарыеКолонки Цикл
		СоответствиеКолонок.Вставить(стр.Ключ,стр);
	КонецЦикла;
	
	ВидимыхПолей = 0;
	
	Для каждого стр из ТаблицаСвойств Цикл
		
		СвойстваКолонки = СоответствиеКолонок.Получить(стр.name);
		Если СвойстваКолонки=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Элементы.Найти("ТаблицаДанных"+СвойстваКолонки.ИмяКолонки);
		
		Если Элемент=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Элемент.Видимость=стр.use Тогда
			Элемент.Видимость = стр.use;
			СвойстваКолонки.Видимость = стр.use;
		КонецЕсли;
		
		Если Элемент.Видимость=Истина Тогда
			ВидимыхПолей=ВидимыхПолей+1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидимыхПолей=0 Тогда
		Сообщить("Вы убрали все поля. Оставьте хотябы одно поле!");
	КонецЕсли;
	
КонецПроцедуры  


&НаКлиенте
Процедура СохранитьНастройкиКолонокТекущегоСписка(Знач list)
	Перем мНастройка;
	Перем Ключ;
	// Сохраним настройки
	Ключ = Строка(ПользователиВызовСервера.ТекущийПользователь())+" МониторRAS1C.ФормаМонитора";
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер,Ключ);
	Если мНастройка=Неопределено Тогда
		мНастройка = новый Структура;
		мНастройка.Вставить("ФормаМонитора",новый Соответствие);
	КонецЕсли;
	
	мНастройка.ФормаМонитора.Вставить(list,новый Структура("Колонки",СтарыеКолонки));
	
	УправлениеХранилищемНастроекВызовСервера.ЗаписатьДанныеВБезопасноеХранилищеРасширенный(Замер,мНастройка,"Настройки пользователя формы монитора",Ключ);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиКолонокТекущегоСписка(Знач Колонки,Знач list)
	
	Перем мНастройка;
	Перем Ключ;
	// Получим настройки
	Ключ = Строка(ПользователиВызовСервера.ТекущийПользователь())+" МониторRAS1C.ФормаМонитора";
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер,Ключ);

	Если мНастройка=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Колонки=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиКолонки = мНастройка.ФормаМонитора.Получить(list);
	
	Если НастройкиКолонки=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеКолонок = новый Соответствие();
	
	Для каждого стр из Колонки Цикл
		СоответствиеКолонок.Вставить(стр.Ключ,стр);
	КонецЦикла;
	
	Для каждого стр из НастройкиКолонки.Колонки Цикл
		Колонка = СоответствиеКолонок.Получить(стр.Ключ);
		Если Колонка=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Колонка.Видимость = стр.Видимость;
	КонецЦикла;
		
КонецПроцедуры

// Процедура - Создать динамические колонки таблицы
//
// Параметры:
//  ИмяТаблицы					 - строка	 - имя таблицы на форме строкой
//  МассивСтруктурКолонок		 - 	 - описание создаваемых колонок
//  МассивСтруктурТекущихКолонок - 	 - описание текущих колонок для удаления из текущей таблицы
&НаСервере
Процедура СоздатьДинамическиеКолонкиТаблицы(ИмяТаблицы,МассивСтруктурКолонок,МассивСтруктурТекущихКолонок,КромеИменКолонок="")
	
	МассивУдаляемыхЭлементов = новый Массив;
	МассивДобавляемыхЭлементов = новый Массив;
	
	Для каждого Колонка из МассивСтруктурТекущихКолонок Цикл
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		МассивУдаляемыхЭлементов.Добавить(ИмяТаблицы+"."+Колонка.Имя);
		Элементы.Удалить(Элементы[ИмяТаблицы+Колонка.Имя]);    
	КонецЦикла;   
	
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));           
	ОписаниеТиповТаблица = Новый ОписаниеТипов(МассивТипов);
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("Строка"));          
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов);
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.ТипЗначения = ОписаниеТиповТаблица Тогда
			ОписаниеТипов = ОписаниеТиповСтрока;
		Иначе
			ОписаниеТипов = новый ОписаниеТипов(Колонка.ТипЗначения);
		КонецЕсли;
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, ОписаниеТипов, ИмяТаблицы, Колонка.Имя, Ложь);
		МассивДобавляемыхЭлементов.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	Если МассивДобавляемыхЭлементов.Количество()=0 И МассивУдаляемыхЭлементов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхЭлементов,МассивУдаляемыхЭлементов);
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл                       
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		СледующийЭлемент = Неопределено;
		Если НЕ Колонка.ИмяСледующегоЭлемента=Неопределено Тогда
			СледующийЭлемент = Элементы.Найти(Колонка.ИмяСледующегоЭлемента);
		КонецЕсли;
		НовыйЭлемент = Элементы.Вставить(Элементы[ИмяТаблицы].Имя+Колонка.Имя, Тип("Полеформы"), Элементы[ИмяТаблицы],СледующийЭлемент);
		Если Колонка.ТипСтрокой="Булево" Или  Колонка.ТипСтрокой="Boolean"Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Высота = 0;
			НовыйЭлемент.Ширина = Колонка.Ширина;                
		КонецЕсли;
		НовыйЭлемент.Видимость = Колонка.Видимость;
		НовыйЭлемент.Доступность = Истина;
		НовыйЭлемент.ТолькоПросмотр = Колонка.ТолькоПросмотр;   
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.Подсказка = Колонка.Заголовок;
		НовыйЭлемент.ПутьКДанным = ИмяТаблицы+"."+Колонка.Имя;    
	КонецЦикла;
	
	
КонецПроцедуры     

&НаКлиенте
Процедура ДобавитьПредставлениеInfobase(Знач МассивСоответствиеДанных)
	
	Перем Соответсвие, стр, эл;
	
	// добавим представление инфобазы
	Если НЕ СписокИнформационныхБаз=Неопределено Тогда
		
		Соответсвие = новый Соответствие;
		Для каждого стр из СписокИнформационныхБаз Цикл
			Соответсвие.Вставить(стр.Получить("infobase"),стр);
		КонецЦикла;
		
		Для каждого стр из МассивСоответствиеДанных Цикл
			эл = Соответсвие.Получить(стр.Получить("infobase"));
			Если Не эл=Неопределено Тогда 
				стр.Вставить("infobase-name",эл.Получить("name"));
			Иначе
				стр.Вставить("infobase-name","");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры    

&НаСервере
Функция ЗавершитьРаботуСенасаНаСервере(мПараметры)
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	возврат РеквизитОбъект.ЗавершитьСеансПользователя(мПараметры)
КонецФункции

&НаКлиенте
Процедура ЗавершитьРаботуСенаса(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	ТекущиеДанныеКластеров = Элементы.ТаблицаКластеров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанныеКластеров=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтарыеКолонки=Неопределено Тогда
		СтарыеКолонки = новый Массив;
	КонецЕсли;		
	
	session = "";
	// найдем поле сессия
	Для каждого стр из СтарыеКолонки Цикл
		Если стр.Ключ="session" Тогда
			session = ТекущиеДанные[стр.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если session="" Тогда
		Возврат;
	КонецЕсли;
	
	мПараметры = СформироватьСтруктуруЗапроса(ТекущиеДанныеКластеров);
	мПараметры.Вставить("session",session);
	СтруктураДанныхОтвета = ЗавершитьРаботуСенасаНаСервере(мПараметры);
	
	ДлительностьЗапроса = СтруктураДанныхОтвета.Длительность;	

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСоставПолей(Команда)
	ОбновитьВидимостьКолонок(Список);
	СохранитьНастройкиКолонокТекущегоСписка(Список);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	мПараметры = новый Структура("Замер",Замер);
	ФормаНастроек = ПолучитьФорму("ВнешняяОбработка.МониторRAS_1C.Форма.ФормаНастроек",мПараметры,ЭтаФорма);
	ФормаНастроек.РежимОткрытияОкна=РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроек.Открыть();
КонецПроцедуры

#Область УстановитьУсловноеОфрмление

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицыДанных(Колонки,list)
	
	ИмяПоляУсловие = "";
	ИмяПоляОформление = "";
	ЭтоИстория = ?(Элементы.КартинкаИстория.Видимость,"история","");
	
	Для каждого стр из Колонки Цикл
	
		Если стр.Ключ="decision" Тогда
			
			ИмяПоляОформление = "ТаблицаДанных"+стр.ИмяКолонки;
			ИмяПоляУсловие = "ТаблицаДанных."+стр.ИмяКолонки;
			
			// желтый
			УстановитьОформлениеПоля("decision_желтый1_"+list+ЭтоИстория,"желтый", "ТаблицаДанных", ИмяПоляУсловие,WebЦвета.Золотой);
//			УстановитьОформлениеПоля("decision_желтый2_"+list+ЭтоИстория,"желтый", ИмяПоляОформление, ИмяПоляУсловие,WebЦвета.Желтый);
		
			// красное
			УстановитьОформлениеПоля("decision_красный1_"+list+ЭтоИстория,"красный", "ТаблицаДанных", ИмяПоляУсловие,WebЦвета.СветлоРозовый);
//			УстановитьОформлениеПоля("decision_красный2_"+list+ЭтоИстория,"красный", ИмяПоляОформление, ИмяПоляУсловие,WebЦвета.Розовый);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	


&НаСервере
Процедура УстановитьОформлениеПоля(Знач Представление, Знач ЗначениеСравенения, Знач ИмяПоляОформление, Знач ИмяПоляУсловие,Знач ЦветФона)

	// проверим наличие офорления
	ЕстьОформление = Ложь;
	
	Для каждого стр из УсловноеОформление.Элементы Цикл
		Если стр.Представление=Представление Тогда
				ЕстьОформление = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОформление=Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОформления  = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = Представление;
	ЭлементОформления.Поля.Элементы.Очистить(); 
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляОформление);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляУсловие);// имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение = ЗначениеСравенения;
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
	
	ЭлементОформления.Использование = Истина;
КонецПроцедуры


#КонецОбласти


#Область ИсторияГрафики


&НаКлиенте
Процедура ОбновитьТаблицуДаннымиИзИстории(Направление)
	
	// отключим автообновление
	Автообновление = Ложь;
	Кластер = "";
	
	Если КлючКластера="" Тогда
		ТекущиеДанные = Элементы.ТаблицаКластеров.ТекущиеДанные;
		Если ТекущиеДанные=Неопределено Тогда
			Возврат;
		КонецЕсли;
		КлючКластера = ТекущиеДанные.key;
		Кластер = ТекущиеДанные.cluster;
		ТекущиеДанные.current = Истина;
	КонецЕсли;
	
	Если Кластер="" Тогда
		Кластер = НайтиКластерПоключку(КлючКластера);
	КонецЕсли;
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СтруктураДанныхОтвета = ОбновитьТаблицуДаннымиИзИсторииСервер(Замер,ДатаОбновления,Список,КлючКластера,Направление);
	
	СоздатьИОбновитьКолонки(СтруктураДанныхОтвета.МассивСоответствиеДанных,Список);
	
	ВычислитьФункцииАгрегации(СтруктураДанныхОтвета.МассивСоответствиеДанных,Список,Кластер);
	
	ДлительностьЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах()-НачалоЗамера)/1000;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиКластерПоключку(key)
	Кластер = "";
	мОтбор = новый Структура("key",key);
	н_строки = ТаблицаКластеров.НайтиСтроки(мОтбор);
	Если н_строки.Количество()>0 Тогда
		Кластер = н_строки[0].cluster;
	КонецЕсли;
	Возврат Кластер;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатаСобытияШагНазад(Замер, ДатаСобытия, ТипСобытия, key, Направление)
	
	Дата = Дата(1,1,1);
	
	Если Направление="без изменений" Тогда
		Возврат ДатаСобытия;
	КонецЕсли;	
	
	Запрос = новый Запрос;
	Если Направление="назад" Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
		|ГДЕ
		|	Т.Ссылка.ДатаСобытия < &ДатаСобытия
		|	И Т.Ссылка.НомерСтрокиФайла = 0
		|	И Т.Ссылка.ТипСобытия.Наименование = &ТипСобытия
		|	И Т.Ссылка.Владелец = &Замер
		|	И (ВЫРАЗИТЬ(Т.Значение КАК СТРОКА(150))) = &Ключ
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия УБЫВ";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
		|ГДЕ
		|	Т.Ссылка.ДатаСобытия > &ДатаСобытия
		|	И Т.Ссылка.НомерСтрокиФайла = 0
		|	И Т.Ссылка.ТипСобытия.Наименование = &ТипСобытия
		|	И Т.Ссылка.Владелец = &Замер
		|	И (ВЫРАЗИТЬ(Т.Значение КАК СТРОКА(150))) = &Ключ
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия Возр";
	КонецЕсли;
	Запрос.УстановитьПараметр("Замер", Замер);
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ТипСобытия", ТипСобытия);
	Запрос.УстановитьПараметр("Ключ", key);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Дата = Выборка.ДатаСобытия;
	КонецЕсли;
	
	Возврат Дата;
КонецФункции	

&НаСервереБезКонтекста
Функция ОбновитьТаблицуДаннымиИзИсторииСервер(Замер, ДатаСобытия, ТипСобытия, key, Направление="назад")

	Если ДатаСобытия=Дата(1,1,1) Тогда
		ДатаСобытия=ТекущаяДата();
	КонецЕсли;
	
	ДатаСобытия = ПолучитьДатаСобытияШагНазад(Замер, ДатаСобытия, ТипСобытия, key, Направление);
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТСК.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтЗамер
	|ИЗ
	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК ТСК
	|ГДЕ
	|	ТСК.Ссылка.Владелец = &Замер
	|	И
	|	НЕ ТСК.Ссылка.НомерСтрокиФайла = 0
	|	И ТСК.Ссылка.ТипСобытия.Наименование = &ТипСобытия
	|	И ТСК.Ссылка.ДатаСобытия = &ДатаСобытия
	|	И ТСК.Свойство.Синоним = &СинонимКлюча
	|	И ВЫРАЗИТЬ(ТСК.Значение КАК СТРОКА(150)) = &Ключ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Значение КАК value,
	|	Т.ЗначениеЧисло КАК value_numeric,
	|	Т.Свойство.Наименование КАК name,
	|	Т.Свойство.Синоним КАК synonim,
	|	Т.Ссылка.НомерСтрокиФайла КАК НомерСтрокиФайла,
	|	Т.Ссылка.ТипСобытия КАК ТипСобытия
	|ИЗ
	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
	|ГДЕ
	|	Т.Ссылка.ДатаСобытия = &ДатаСобытия
	|	И
	|	НЕ Т.Ссылка.НомерСтрокиФайла = 0
	|	И Т.Ссылка.ТипСобытия.Наименование = &ТипСобытия
	|	И Т.Ссылка.Владелец = &Замер
	|	И Т.Ссылка В
	|		(ВЫБРАТЬ
	|			Вт.Ссылка
	|		ИЗ
	|			ВтЗамер КАК Вт)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиФайла,
	|	Т.НомерСтроки УБЫВ
	|ИТОГИ
	|ПО
	|	НомерСтрокиФайла";
	Запрос.УстановитьПараметр("Замер", Замер);
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ТипСобытия", ТипСобытия);
	Запрос.УстановитьПараметр("Ключ", key);
	Запрос.УстановитьПараметр("СинонимКлюча", "key");
	
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	МассивСоответствиеДанных = новый Массив;
	
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		Выборка = ВыборкаНомерСтроки.Выбрать();
		СоответствиеДанных = новый Соответствие;
		
		СоответствиеДанных.Вставить("decision","");
		
		Пока Выборка.Следующий() Цикл
			
			Ключ = ?(ЗначениеЗаполнено(Выборка.name),Выборка.name,Выборка.synonim);
			
			Если (Выборка.value="0" И Выборка.value_numeric=0) ИЛИ
			Выборка.value_numeric<>0 Тогда
				СоответствиеДанных.Вставить(Ключ,Выборка.value_numeric);
			Иначе
				СоответствиеДанных.Вставить(Ключ,Выборка.value);
			КонецЕсли;
		
		КонецЦикла;	
		
		МассивСоответствиеДанных.Добавить(СоответствиеДанных);
		
	КонецЦикла;
	
	СтруктураДанныхОтвета = новый Структура();
	СтруктураДанныхОтвета.Вставить("МассивСоответствиеДанных",МассивСоответствиеДанных);
	СтруктураДанныхОтвета.Вставить("Длительность",0);
	СтруктураДанныхОтвета.Вставить("duration",0);
	СтруктураДанныхОтвета.Вставить("ТекстОшибки","");
	
	Возврат СтруктураДанныхОтвета;
	
КонецФункции



&НаКлиенте
Процедура ОбновитьГрафикИстории()
	
	ТекущиеДанные = Элементы.ТаблицаАгрегацииДанных.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаАгрегации = новый Структура("name,func,list,cluster");
	ЗаполнитьЗначенияСвойств(ТекущаяСтрокаАгрегации, ТекущиеДанные);
	
	Свойство = ТекущиеДанные.name;
	
	ОбновитьГрафикИсторииСервер(Список,ТекущиеДанные.name,ТекущиеДанные.synonim,ТекущиеДанные.func,КлючКластера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрафик(Команда)
	ОбновитьГрафикИстории();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАгрегацииДанныхПриАктивизацииСтроки(Элемент)
	ОбновитьГрафикИстории();
КонецПроцедуры


&НаКлиенте
Процедура ИнтервалИсторииПриИзменении(Элемент)
	ОбновитьГрафикИстории();
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикИсторииСервер(ТипСобытия,name,synonim,func,key)
	
	ДатаСобытия = ДатаОбновления;
	Если ДатаСобытия=Дата(1,1,1) Тогда
		ДатаСобытия = ТекущаяДата();
	КонецЕсли;
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	Свойство = РеквизитОбъект.ПолучитьСвойствоБезопасно(name,synonim,func);
	
	Диаграмма.Очистить();
	Диаграмма.ТипДиаграммы=ТипДиаграммы.График;
	Диаграмма.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.Низ;
	
	спрКлюч = СправочникиСерверПовтИсп.ПолучитьКлючСобытия(key);
	спрТипСобытия = СправочникиСерверПовтИсп.ПолучитьСобытие(ТипСобытия);
	
	Запрос = новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	Т.Свойство КАК Свойство,
//	|	Т.ЗначениеЧисло КАК ЗначениеЧисло,
//	|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия
//	|ИЗ
//	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
//	|ГДЕ
//	|	Т.Ссылка.Владелец = &Замер
//	|	И Т.Свойство = &Свойство
//	|	И Т.Ссылка.НомерСтрокиФайла = 0
//	|	И Т.Ссылка.ТипСобытия.Наименование = &ТипСобытия
//	|	И Т.Ссылка.ДатаСобытия МЕЖДУ &ДатаНачала И &ДатаОкончания
//	|	И Т.Ссылка В
//	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|			ТСК.Ссылка
//	|		ИЗ
//	|			Справочник.СобытияЗамера.КлючевыеСвойства КАК ТСК
//	|		ГДЕ
//	|			ТСК.Ссылка.Владелец = &Замер
//	|			И ТСК.Ссылка.НомерСтрокиФайла = 0
//	|			И ТСК.Ссылка.ТипСобытия.Наименование = &ТипСобытия
//	|			И ТСК.Ссылка.ДатаСобытия МЕЖДУ &ДатаНачала И &ДатаОкончания
//	|			И ТСК.Свойство.Синоним = &СинонимКлюча
//	|			И ВЫРАЗИТЬ(ТСК.Значение КАК СТРОКА(150)) = &Ключ)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДатаСобытия";	
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Свойство КАК Свойство,
	|	Т.ЗначениеЧисло КАК ЗначениеЧисло,
	|	Т.Ссылка.ДатаСобытия КАК ДатаСобытия
	|ИЗ
	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК Т
	|ГДЕ
	|	Т.Ссылка.Владелец = &Замер
	|	И Т.Свойство = &Свойство
	|	И Т.Ссылка.ДатаСобытия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Т.Ссылка.НомерСтрокиФайла = 0
	|	И Т.Ссылка.ТипСобытия = &ТипСобытия
	|	И Т.Ссылка.Ключ = &Ключ
//	|	И Т.Ссылка В
//	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|			ТСК.Ссылка
//	|		ИЗ
//	|			Справочник.СобытияЗамера.КлючевыеСвойства КАК ТСК
//	|		ГДЕ
//	|			ТСК.Ссылка.Владелец = &Замер
//	|			И ТСК.Ссылка.НомерСтрокиФайла = 0
//	|			И ТСК.Ссылка.ТипСобытия = &ТипСобытия
//	|			И ТСК.Ссылка.ДатаСобытия МЕЖДУ &ДатаНачала И &ДатаОкончания
//	|			И ТСК.Свойство.Синоним = &СинонимКлюча
//	|			И ВЫРАЗИТЬ(ТСК.Значение КАК СТРОКА(150)) = &КлючНаименование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";		
	Запрос.УстановитьПараметр("Замер", Замер);
	//Запрос.УстановитьПараметр("ТипСобытия", ТипСобытия);
	Запрос.УстановитьПараметр("ТипСобытия", спрТипСобытия);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаСобытия-ИнтервалИстории);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаСобытия);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	// кластер
	Запрос.УстановитьПараметр("КлючНаименование", key);
	Запрос.УстановитьПараметр("СинонимКлюча", "key");
	Запрос.УстановитьПараметр("Ключ", спрКлюч);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СерияОкно = Диаграмма.УстановитьСерию(Свойство);
	
	Ключ = ТипСобытия+"->"+name+"("+func+")";
	мОтбор = новый Структура("key",Ключ);
	
	н_строки = ТаблицаСуждений.НайтиСтроки(мОтбор);
	СуждениеЦветоваяИндикация = Неопределено;
	Если н_строки.Количество()>0 Тогда
		СуждениеЦветоваяИндикация = н_строки[0]; 	
	КонецЕсли;

	//Если НЕ СуждениеЦветоваяИндикация=Неопределено Тогда
	//	СерияЖелтый = Диаграмма.УстановитьСерию("Желтый");
	//	СерияЖелтый.Цвет = новый Цвет(249,166,2);
	//	СерияКрасный = Диаграмма.УстановитьСерию("Красный");
	//	СерияКрасный.Цвет = новый Цвет(255,100,100);
	//КонецЕсли;
	
	
	Пока Выборка.Следующий() Цикл
		
		ТочкаДиаграммы = Диаграмма.УстановитьТочку(Выборка.ДатаСобытия);
			
		// добавим значение	
		Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияОкно, Выборка.ЗначениеЧисло);
		
		//Если НЕ СуждениеЦветоваяИндикация=Неопределено Тогда
		//	ЗначениеЧисло = ?(СуждениеЦветоваяИндикация.invert=Истина,СуждениеЦветоваяИндикация.warning_to, СуждениеЦветоваяИндикация.warning_from);
		//	Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияЖелтый, ЗначениеЧисло);
		//	ЗначениеЧисло = ?(СуждениеЦветоваяИндикация.invert=Истина,СуждениеЦветоваяИндикация.attention_to, СуждениеЦветоваяИндикация.attention_from);
		//	Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияКрасный, ЗначениеЧисло);
		//КонецЕсли;
		
	КонецЦикла;
	

	ОбновитьДобавитьИнформационныеИнтервалы(СуждениеЦветоваяИндикация);

	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДобавитьИнформационныеИнтервалы(СуждениеЦветоваяИндикация)
	
	
	Желтый = ПолучитьСоздатьИнформационныйИнтервалЗначений("Желтый");
	Красный = ПолучитьСоздатьИнформационныйИнтервалЗначений("Красный");
	
	
	//Если Диаграмма.ИнформационныеИнтервалыТочек.Количество()=0 Тогда
	Если СуждениеЦветоваяИндикация=Неопределено Тогда
		Желтый.Начало=0; 
		Желтый.Конец=0;
		Красный.Начало=0; 
		Красный.Конец=0;
	Иначе
		Если СуждениеЦветоваяИндикация.invert=Истина Тогда		 
			Желтый.Начало = СуждениеЦветоваяИндикация.attention_to;
			Желтый.Конец = СуждениеЦветоваяИндикация.warning_to;
			Желтый.Цвет = Новый Цвет(249,166,2);;
			Желтый.ПроцентПолупрозрачности = 80;
			
			Красный.Начало = 0;
			Красный.Конец = СуждениеЦветоваяИндикация.attention_to;
			Красный.Цвет =  Новый Цвет(255,100,100);
			Красный.ПроцентПолупрозрачности = 80;
		Иначе
			Желтый.Начало = СуждениеЦветоваяИндикация.warning_from;
			Желтый.Конец = СуждениеЦветоваяИндикация.attention_from;
			Желтый.Цвет = Новый Цвет(249,166,2);;
			Желтый.ПроцентПолупрозрачности = 80;
			
			Красный.Начало = СуждениеЦветоваяИндикация.attention_from;
			Красный.Конец = 1000000;
			Красный.Цвет =  Новый Цвет(255,100,100);
			Красный.ПроцентПолупрозрачности = 80;
			КонецЕсли;
	КонецЕсли;
	//КонецЕсли;		
КонецПроцедуры

&НаСервере
Функция ПолучитьСоздатьИнформационныйИнтервалЗначений(ИмяИнтервала)
	Интервал = Неопределено;
	
	Для каждого стр из Диаграмма.ИнформационныеИнтервалыЗначений Цикл
		Если стр.ТекстПодписи=ИмяИнтервала ИЛИ стр.Подсказка=ИмяИнтервала Тогда
			Интервал = стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Интервал=Неопределено Тогда
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		//Интервал.ТекстПодписи = ИмяИнтервала;
		Интервал.Подсказка = ИмяИнтервала;
	КонецЕсли;
	
	Возврат Интервал;
КонецФункции


&НаКлиенте
Процедура Назад(Команда)
	Элементы.КартинкаИстория.Видимость = Истина;
	Цвет = новый Цвет(200,255,200);
	Элементы.ДатаОбновления.ЦветФона = Цвет;
	ОбновитьТаблицуДаннымиИзИстории("назад");
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	Элементы.КартинкаИстория.Видимость = Истина;
	Цвет = новый Цвет(200,255,255);
	Элементы.ДатаОбновления.ЦветФона = Цвет;
	ОбновитьТаблицуДаннымиИзИстории("вперед");
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбновленияПриИзменении(Элемент)
	
	Элементы.КартинкаИстория.Видимость = Истина;
	Цвет = новый Цвет(200,255,200);
	Элементы.ДатаОбновления.ЦветФона = Цвет;
	ОбновитьТаблицуДаннымиИзИстории("назад");
	
КонецПроцедуры







#КонецОбласти

#Область Сортировка


&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СортироватьТаблицуДанных("","Убыв");	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СортироватьТаблицуДанных("","Возр");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТаблицуДанных(ИмяКолонки,Направление="Возр")
	
	Если ИмяКолонки="" Тогда
		Элемент = Элементы.ТаблицаДанных.ТекущийЭлемент;
		Если Элемент=Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИмяКолонки = СтрЗаменить(Элемент.Имя,"ТаблицаДанных","");
		ИмяКолонкиСортировки = ИмяКолонки+" "+Направление;
	КонецЕсли;
	
	Попытка
		ТаблицаДанных.Сортировать(ИмяКолонкиСортировки);
	Исключение
		// сбросим если нет сортировки
		ИмяКолонкиСортировки = "";
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПервойСтроке(Команда)
	Если ТаблицаДанных.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТаблицаДанных.ТекущаяСтрока = ТаблицаДанных[0].ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПоследнейСтроке(Команда)
	Если ТаблицаДанных.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТаблицаДанных.ТекущаяСтрока = ТаблицаДанных[ТаблицаДанных.Количество()-1].ПолучитьИдентификатор();
КонецПроцедуры



#КонецОбласти