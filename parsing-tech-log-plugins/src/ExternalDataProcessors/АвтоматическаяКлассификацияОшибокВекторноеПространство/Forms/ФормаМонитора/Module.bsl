
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*48,"2 д");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*25,"1 д 1ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*24,"1 д");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*12,"12 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*6,"6 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*3,"3 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*2,"2 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60*1.5,"1 ч 30 мин");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*60,"1 ч");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*30,"30 мин");
	Элементы.ИнтервалИстории.СписокВыбора.Добавить(60*15,"15 мин");

	Если НЕ ЗначениеЗаполнено(ИнтервалИстории) Тогда
		ИнтервалИстории = 60*60*2;
	КонецЕсли;
	
	Элементы.ИсточникДанных.СписокВыбора.Добавить("ТекущийЗамер","Текущий замер");
	Элементы.ИсточникДанных.СписокВыбора.Добавить("РегистрКлассификатор","Классификатор");
	
	Если НЕ ЗначениеЗаполнено(ИсточникДанных) Тогда
		ИсточникДанных = "ТекущийЗамер";
	КонецЕсли;
	
	Элементы.ТекТипДиаграммы.СписокВыбора.Добавить("График","График");
	Элементы.ТекТипДиаграммы.СписокВыбора.Добавить("ГрафикСОбластями","ГрафикСОбластями");
	Элементы.ТекТипДиаграммы.СписокВыбора.Добавить("ГрафикПоШагам","ГрафикПоШагам");
	Элементы.ТекТипДиаграммы.СписокВыбора.Добавить("Гистограмма","Гистограмма");
	Элементы.ТекТипДиаграммы.СписокВыбора.Добавить("КруговаяОбъемная","КруговаяОбъемная");
	Элементы.ТекТипДиаграммы.СписокВыбора.Добавить("Круговая","Круговая");	
	                                                                 
	Если НЕ ЗначениеЗаполнено(ТекТипДиаграммы) Тогда		
		ТекТипДиаграммы = "Гистограмма";
	КонецЕсли;
	
	ЗагрузитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамерПриИзменении(Элемент)
	ЗагрузитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбновленияПриИзменении(Элемент)
	ОбновитьГрафикИстории();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьГрафикИсторииКлиент(Команда)
	ОбновитьГрафикИстории();
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаКлассификаторПриИзменении(Элемент)
	ОбновитьГрафикИстории();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьНастройки()
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
	Если мНастройка<>Неопределено Тогда
		Классификатор 			= мНастройка.Классификатор;
		ГруппировкаПоВремени 	= мНастройка.ГруппировкаПоВремени;
	КонецЕсли;
	Тема_ОбновитьСоставКлассификатора(Классификатор);
КонецПроцедуры

&НаСервере
Процедура Тема_ОбновитьСоставКлассификатора(Знач Корень)
	
	Запрос = новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПоКлассификатору();
	Запрос.УстановитьПараметр("Корень",Корень);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаКлассификатор.Очистить();
	КешРодителей = новый Соответствие();
	
	// неклассифицируемые ошибки
	стр_н = ТаблицаКлассификатор.Добавить();
	стр_н.Уровень1 = Истина;
	стр_н.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	стр_н.Тема = "Всего (Total)";
	стр_н.НижняяГраница = 0;
	

	Пока Выборка.Следующий() Цикл
		// корень не добавляем
		Если Выборка.Ссылка=Корень Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Родитель=Корень Тогда
			стр_н = ТаблицаКлассификатор.Добавить();
			стр_н.Уровень1 = Истина;
			КешРодителей.Вставить(Выборка.Ссылка,стр_н);
		Иначе
			стр_н = ТаблицаКлассификатор.Вставить(ТаблицаКлассификатор.Индекс(КешРодителей.Получить(Выборка.Родитель))+1);
			стр_н.Уровень2 = Истина;
		КонецЕсли;
		стр_н.Ссылка = Выборка.Ссылка;
		стр_н.Тема = Выборка.Наименование;
		стр_н.НижняяГраница = Выборка.НижняяГраница;
	КонецЦикла;	
	
	// неклассифицируемые ошибки
	стр_н = ТаблицаКлассификатор.Добавить();
	стр_н.Уровень1 = Истина;
	стр_н.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	стр_н.Тема = "Неклассифицированные (unknown)";
	стр_н.НижняяГраница = 0;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
функция ПолучитьТекстЗапросаПоКлассификатору()

Возврат "ВЫБРАТЬ
	|	ИзвестныеСитуации.Ссылка КАК Ссылка,
	|	ИзвестныеСитуации.Родитель КАК Родитель,
	|	ИзвестныеСитуации.Наименование КАК Наименование,
	|	ИзвестныеСитуации.Наименование КАК Тема,
	|	ИзвестныеСитуации.Текст КАК Текст,
	|	ИзвестныеСитуации.НижняяГраница КАК НижняяГраница
	|ИЗ
	|	Справочник.ИзвестныеСитуации КАК ИзвестныеСитуации
	|ГДЕ
	|	ИзвестныеСитуации.Ссылка В ИЕРАРХИИ(&Корень)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	
КонецФункции


&НаКлиенте
Процедура ИнтервалИсторииПриИзменении(Элемент)
	ОбновитьГрафикИстории();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьГрафикИстории()
	
	ТекущиеДанные = Элементы.ТаблицаКлассификатор.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьГрафикИсторииСервер(Замер,ИсточникДанных,ТекущиеДанные.Ссылка,ТекущиеДанные.Тема);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьТаблицуВременнойШкалы(Знач ШагПоВремени,Знач Интервал,Знач ДатаОтсчета)
	
	Шаг = ПолучитьШагПоВремени(ШагПоВремени);
	
	Если ДатаОтсчета=Дата(1,1,1) Тогда
		ДатаОтсчета = ТекущаяДата();
	КонецЕсли;	
	
	// центрируем время отсчета
	ДатаОтсчета = ПриобразоватьВремяКИнтервалу(ШагПоВремени,ДатаОтсчета);
	
	ТЗ = новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("МеткаВремени",новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("Интервал",новый ОписаниеТипов("Число"));
	
	тмп = 0;
	Пока тмп<=Интервал Цикл
		
		стр_н = ТЗ.Добавить();
		стр_н.МеткаВремени = ДатаОтсчета-тмп;
		стр_н.Интервал = тмп;		
		
		тмп = тмп + Шаг;	
		
	КонецЦикла;
	
	Возврат ТЗ;
КонецФункции

&НаСервереБезКонтекста
Функция ПриобразоватьВремяКИнтервалу(Знач ГруппировкаПоВремени, Знач ДатаСобытия)
	
	ДатаИнтервала = НачалоЧаса(ДатаСобытия);
	Интервал = Минута(ДатаСобытия);
	
	Если ГруппировкаПоВремени="1_час" Тогда
		ДатаИнтервала = НачалоЧаса(ДатаСобытия);	
	ИначеЕсли ГруппировкаПоВремени="30_мин" Тогда
		Интервал = Окр(Интервал/30,0,РежимОкругления.Окр15как10);
		ДатаИнтервала=ДатаИнтервала+Интервал*30*60;
	ИначеЕсли ГруппировкаПоВремени="15_мин" Тогда
		Интервал = Окр(Интервал/15,0,РежимОкругления.Окр15как10);
		ДатаИнтервала=ДатаИнтервала+Интервал*15*60;
	ИначеЕсли ГруппировкаПоВремени="10_мин" Тогда
		Интервал = Окр(Интервал/10,0,РежимОкругления.Окр15как10);
		ДатаИнтервала=ДатаИнтервала+Интервал*10*60;
	ИначеЕсли ГруппировкаПоВремени="5_мин" Тогда
		Интервал = Окр(Интервал/5,0,РежимОкругления.Окр15как10);
		ДатаИнтервала=ДатаИнтервала+Интервал*5*60;
	Иначе
		ДатаИнтервала = НачалоМинуты(ДатаСобытия);
	КонецЕсли;
	
	Возврат ДатаИнтервала;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШагПоВремени(Знач ГруппировкаПоВремени)
	
	ШагПоВремени = 60*60;
	
	Если ГруппировкаПоВремени="1_час" Тогда
		ШагПоВремени = 60*60;	
	ИначеЕсли ГруппировкаПоВремени="30_мин" Тогда
		ШагПоВремени = 30*60;	
	ИначеЕсли ГруппировкаПоВремени="15_мин" Тогда
		ШагПоВремени = 15*60;	
	ИначеЕсли ГруппировкаПоВремени="10_мин" Тогда
		ШагПоВремени = 10*60;	
	ИначеЕсли ГруппировкаПоВремени="5_мин" Тогда
		ШагПоВремени = 5*60;	
	Иначе
		ШагПоВремени = 1*60;	
	КонецЕсли;
	
	Возврат ШагПоВремени;
	
КонецФункции

&НаСервере
Процедура ОбновитьГрафикИсторииСервер(ТекущийЗамер,ТекущийИсточникДанных,ТекущийКласс,ТекущаяТема)
	
	ДатаСобытия = ДатаОбновления;
	Если ДатаСобытия=Дата(1,1,1) Тогда
		ДатаСобытия = ТекущаяДата();
	КонецЕсли;
	
	СвойстваСправочника = новый Структура("ЧисловойРежим",Истина);	
	СвойствоТотал = СправочникиСерверПовтИсп.ПолучитьСвойствоПоИмениСинониму("Total","Total",СвойстваСправочника);
	
	Если ТекущийКласс=Справочники.ИзвестныеСитуации.ПустаяСсылка() Тогда
		Если ТекущаяТема="Неклассифицированные (unknown)" Тогда
			Свойство = СправочникиСерверПовтИсп.ПолучитьСвойствоПоИмениСинониму("Unknown","Unknown",СвойстваСправочника);
		ИначеЕсли ТекущаяТема="Всего (Total)" Тогда
			Свойство = СвойствоТотал;
		КонецЕсли;
	Иначе
		Свойство = СправочникиСерверПовтИсп.ПолучитьСвойствоПоИмениСинониму(ТекущийКласс,ТекущийКласс,СвойстваСправочника);
	КонецЕсли;	
	
	Диаграмма.Очистить();
	Если ТекТипДиаграммы="График" Тогда
		Диаграмма.ТипДиаграммы=ТипДиаграммы.График;
	ИначеЕсли ТекТипДиаграммы="ГрафикСОбластями" Тогда
		Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикСОбластями;
	ИначеЕсли ТекТипДиаграммы="ГрафикПоШагам" Тогда
		Диаграмма.ТипДиаграммы=ТипДиаграммы.ГрафикПоШагам;
	ИначеЕсли ТекТипДиаграммы="Круговая" Тогда
		Диаграмма.ТипДиаграммы=ТипДиаграммы.Круговая;
	ИначеЕсли ТекТипДиаграммы="КруговаяОбъемная" Тогда
		Диаграмма.ТипДиаграммы=ТипДиаграммы.КруговаяОбъемная;
	Иначе
		Диаграмма.ТипДиаграммы=ТипДиаграммы.Гистограмма;
	КонецЕсли;
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.МеткаВремени КАК МеткаВремени
	|ПОМЕСТИТЬ ВтШкалаВремени
	|ИЗ
	|	&ТЗ КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияЗамераКлючевыеСвойства.Ссылка.ДатаСобытия КАК ДатаСобытия,
	|	СобытияЗамераКлючевыеСвойства.ЗначениеЧисло КАК ЗначениеЧисло,
	|	СобытияЗамераКлючевыеСвойства.Свойство КАК Свойство
	|ПОМЕСТИТЬ ВтДанные
	|ИЗ
	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК СобытияЗамераКлючевыеСвойства
	|ГДЕ
	|	СобытияЗамераКлючевыеСвойства.Свойство = &Свойство
	|	И СобытияЗамераКлючевыеСвойства.Ссылка.Владелец = &Замер
	|	И СобытияЗамераКлючевыеСвойства.Ссылка.ДатаСобытия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтШкалаВремени.МеткаВремени,
	|	0,
	|	&Свойство
	|ИЗ
	|	ВтШкалаВремени КАК ВтШкалаВремени
	|;
	|";
	
	Если   Диаграмма.ТипДиаграммы=ТипДиаграммы.Круговая ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.КруговаяОбъемная Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Т.МеткаВремени КАК МеткаВремени
		|ПОМЕСТИТЬ ВтШкалаВремени
		|ИЗ
		|	&ТЗ КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияЗамераКлючевыеСвойства.Ссылка.ДатаСобытия КАК ДатаСобытия,
		|	СобытияЗамераКлючевыеСвойства.ЗначениеЧисло КАК ЗначениеЧисло,
		|	СобытияЗамераКлючевыеСвойства.Свойство КАК Свойство
		|ПОМЕСТИТЬ ВтДанные
		|ИЗ
		|	Справочник.СобытияЗамера.КлючевыеСвойства КАК СобытияЗамераКлючевыеСвойства
		|ГДЕ
		|	 СобытияЗамераКлючевыеСвойства.Ссылка.Владелец = &Замер
		|	И СобытияЗамераКлючевыеСвойства.Ссылка.ДатаСобытия МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|;
		|	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВтДанные.ЗначениеЧисло) КАК ЗначениеЧисло,
		|	ВтДанные.Свойство КАК Свойство
		|ИЗ
		|	ВтДанные КАК ВтДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанные.Свойство";  
		
	Иначе         
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Т.МеткаВремени КАК МеткаВремени
		|ПОМЕСТИТЬ ВтШкалаВремени
		|ИЗ
		|	&ТЗ КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СобытияЗамераКлючевыеСвойства.Ссылка.ДатаСобытия КАК ДатаСобытия,
		|	СобытияЗамераКлючевыеСвойства.ЗначениеЧисло КАК ЗначениеЧисло,
		|	СобытияЗамераКлючевыеСвойства.Свойство КАК Свойство
		|ПОМЕСТИТЬ ВтДанные
		|ИЗ
		|	Справочник.СобытияЗамера.КлючевыеСвойства КАК СобытияЗамераКлючевыеСвойства
		|ГДЕ
		|	СобытияЗамераКлючевыеСвойства.Свойство = &Свойство
		|	И СобытияЗамераКлючевыеСвойства.Ссылка.Владелец = &Замер
		|	И СобытияЗамераКлючевыеСвойства.Ссылка.ДатаСобытия МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтШкалаВремени.МеткаВремени,
		|	0,
		|	&Свойство
		|ИЗ
		|	ВтШкалаВремени КАК ВтШкалаВремени
		|;
		|	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанные.ДатаСобытия КАК ДатаСобытия,
		|	СУММА(ВтДанные.ЗначениеЧисло) КАК ЗначениеЧисло,
		|	ВтДанные.Свойство КАК Свойство
		|ИЗ
		|	ВтДанные КАК ВтДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтДанные.Свойство,
		|	ВтДанные.ДатаСобытия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСобытия";  
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Замер",ТекущийЗамер);
	Запрос.УстановитьПараметр("Свойство",Свойство);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаСобытия-ИнтервалИстории);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаСобытия);
	Запрос.УстановитьПараметр("ТЗ",СформироватьТаблицуВременнойШкалы(ГруппировкаПоВремени,ИнтервалИстории,ДатаОбновления));
	
	Выборка = Запрос.Выполнить().Выбрать();
	

	
	Если  Диаграмма.ТипДиаграммы=ТипДиаграммы.Круговая ИЛИ Диаграмма.ТипДиаграммы=ТипДиаграммы.КруговаяОбъемная Тогда
		
	ТочкаСтрокой = ""+(ДатаСобытия-ИнтервалИстории)+"-"+ДатаСобытия; 	
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Свойство=СвойствоТотал Тогда
				Продолжить;
			КонецЕсли;
			
			ТочкаДиаграммы = Диаграмма.УстановитьТочку(ТочкаСтрокой);
			
			СерияОкно = Диаграмма.УстановитьСерию(Выборка.Свойство);	
			
			// добавим значение	
			Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияОкно, Выборка.ЗначениеЧисло);		
			
		КонецЦикла;     
	Иначе           
		
		СерияОкно = Диаграмма.УстановитьСерию(Свойство);
		
		Пока Выборка.Следующий() Цикл
			
			ТочкаДиаграммы = Диаграмма.УстановитьТочку(Выборка.ДатаСобытия);
			
			// добавим значение	
			Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияОкно, Выборка.ЗначениеЧисло);		
			
		КонецЦикла; 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКлассификаторПриАктивизацииСтроки(Элемент)
	ОбновитьГрафикИстории();
КонецПроцедуры

&НаКлиенте
Процедура ВпередПоИстории(Команда)
	Если НЕ ЗначениеЗаполнено(ДатаОбновления) Тогда
		ДатаОбновления = ТекущаяДата();
	КонецЕсли;
	ДатаОбновления = ДатаОбновления+ИнтервалИстории;
	Если ДатаОбновления>ТекущаяДата() Тогда
		ДатаОбновления = ТекущаяДата();
	КонецЕсли;	
	ОбновитьГрафикИстории();
КонецПроцедуры

&НаКлиенте
Процедура НазадПоИстории(Команда)
	Если НЕ ЗначениеЗаполнено(ДатаОбновления) Тогда
		ДатаОбновления = ТекущаяДата();
	КонецЕсли;
	ДатаОбновления = ДатаОбновления-ИнтервалИстории;
	ОбновитьГрафикИстории();
КонецПроцедуры

&НаКлиенте
Процедура ТекТипДиаграммыПриИзменении(Элемент)
	ОбновитьГрафикИстории();
КонецПроцедуры



